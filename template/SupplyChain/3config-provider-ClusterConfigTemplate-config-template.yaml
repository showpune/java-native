apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  annotations:
    kapp.k14s.io/identity: v1;/carto.run/ClusterConfigTemplate/convention-template;carto.run/v1alpha1
    kapp.k14s.io/original: '{"apiVersion":"carto.run/v1alpha1","kind":"ClusterConfigTemplate","metadata":{"labels":{"kapp.k14s.io/app":"1647776984819028740","kapp.k14s.io/association":"v1.2bcdf58bddb06beabb3a9f3d61ba556a"},"name":"convention-template"},"spec":{"configPath":".status.template","params":[{"default":"default","name":"serviceAccount"}],"ytt":"#@
      load(\"@ytt:data\", \"data\")\n\n#@ def param(key):\n#@   if not key in data.values.params:\n#@     return
      None\n#@   end\n#@   return data.values.params[key]\n#@ end\n\n#@ def merge_labels(fixed_values):\n#@   labels
      = {}\n#@   if hasattr(data.values.workload.metadata, \"labels\"):\n#@     labels.update(data.values.workload.metadata.labels)\n#@   end\n#@   labels.update(fixed_values)\n#@   return
      labels\n#@ end\n\n#@ def build_fixed_annotations():\n#@   fixed_annotations
      = { \"developer.conventions/target-containers\": \"workload\" }\n#@   if param(\"debug\"):\n#@     fixed_annotations[\"apps.tanzu.vmware.com/debug\"]
      = param(\"debug\")\n#@   end\n#@   if param(\"live-update\"):\n#@     fixed_annotations[\"apps.tanzu.vmware.com/live-update\"]
      = param(\"live-update\")\n#@   end\n#@   return fixed_annotations\n#@ end\n\n#@
      def merge_annotations(fixed_values):\n#@   annotations = {}\n#@   if hasattr(data.values.workload.metadata,
      \"annotations\"):\n#@     annotations.update(data.values.workload.metadata.annotations)\n#@   end\n#@   annotations.update(fixed_values)\n#@   return
      annotations\n#@ end\n\napiVersion: conventions.apps.tanzu.vmware.com/v1alpha1\nkind:
      PodIntent\nmetadata:\n  name: #@ data.values.workload.metadata.name\n  labels:\n    app.kubernetes.io/component:
      intent\n    #@ if/end hasattr(data.values.workload.metadata, \"labels\") and
      hasattr(data.values.workload.metadata.labels, \"app.kubernetes.io/part-of\"):\n    app.kubernetes.io/part-of:
      #@ data.values.workload.metadata.labels[\"app.kubernetes.io/part-of\"]\nspec:\n  serviceAccountName:
      #@ data.values.params.serviceAccount\n  template:\n    metadata:\n      annotations:
      #@ merge_annotations(build_fixed_annotations())\n      labels: #@ merge_labels({
      \"app.kubernetes.io/component\": \"run\", \"carto.run/workload-name\": data.values.workload.metadata.name
      })\n    spec:\n      serviceAccountName: #@ data.values.params.serviceAccount\n      containers:\n        -
      name: workload\n          image: #@ data.values.image\n          securityContext:\n            runAsUser:
      1000\n          #@ if hasattr(data.values.workload.spec, \"env\"):\n          env:\n            #@
      for var in data.values.workload.spec.env:\n            - name: #@ var.name\n              value:
      #@ var.value\n            #@ end\n          #@ end\n          #@ if/end hasattr(data.values.workload.spec,
      \"resources\"):\n          resources: #@ data.values.workload.spec[\"resources\"]\n"}}'
    kapp.k14s.io/original-diff-md5: c6e94dc94aed3401b5d0f26ed6c0bff3
  creationTimestamp: "2022-03-20T11:49:45Z"
  generation: 1
  labels:
    kapp.k14s.io/app: "1647776984819028740"
    kapp.k14s.io/association: v1.2bcdf58bddb06beabb3a9f3d61ba556a
  name: convention-template
  resourceVersion: "10691"
  uid: cdbd34a4-51ff-4e3a-ad77-9f7fb3a79ac8
spec:
  configPath: .status.template
  params:
  - default: default
    name: serviceAccount
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def build_fixed_annotations():
    #@   fixed_annotations = { "developer.conventions/target-containers": "workload" }
    #@   if param("debug"):
    #@     fixed_annotations["apps.tanzu.vmware.com/debug"] = param("debug")
    #@   end
    #@   if param("live-update"):
    #@     fixed_annotations["apps.tanzu.vmware.com/live-update"] = param("live-update")
    #@   end
    #@   return fixed_annotations
    #@ end

    #@ def merge_annotations(fixed_values):
    #@   annotations = {}
    #@   if hasattr(data.values.workload.metadata, "annotations"):
    #@     annotations.update(data.values.workload.metadata.annotations)
    #@   end
    #@   annotations.update(fixed_values)
    #@   return annotations
    #@ end

    apiVersion: conventions.apps.tanzu.vmware.com/v1alpha1
    kind: PodIntent
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: intent
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      template:
        metadata:
          annotations: #@ merge_annotations(build_fixed_annotations())
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          containers:
            - name: workload
              image: #@ data.values.image
              securityContext:
                runAsUser: 1000
              #@ if hasattr(data.values.workload.spec, "env"):
              env:
                #@ for var in data.values.workload.spec.env:
                - name: #@ var.name
                  value: #@ var.value
                #@ end
              #@ end
              #@ if/end hasattr(data.values.workload.spec, "resources"):
              resources: #@ data.values.workload.spec["resources"]
